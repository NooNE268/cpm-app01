import React, { useState } from "react";
import { Slider } from "@/components/ui/slider";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Gauge } from "lucide-react";

const categories = [
  { key: "useCase", label: "Token Utility & Use Case", weight: 0.2 },
  { key: "team", label: "Team & Transparency", weight: 0.1 },
  { key: "roadmap", label: "Roadmap & Dev Activity", weight: 0.1 },
  { key: "community", label: "Community Strength", weight: 0.1 },
  { key: "tokenomics", label: "Tokenomics", weight: 0.1 },
  { key: "sentiment", label: "Market Sentiment & Hype", weight: 0.1 },
  { key: "liquidity", label: "Liquidity & Listings", weight: 0.1 },
  { key: "partnerships", label: "Partnerships & Ecosystem", weight: 0.05 },
  { key: "funding", label: "Funding & Investors", weight: 0.1 },
];

export default function CPMeter() {
  const [scores, setScores] = useState(Object.fromEntries(categories.map(c => [c.key, 5])));
  const [redFlags, setRedFlags] = useState(0);
  const [finalScore, setFinalScore] = useState(null);

  const handleScoreChange = (key, value) => {
    setScores(prev => ({ ...prev, [key]: value }));
  };

  const calculateScore = () => {
    const total = categories.reduce(
      (sum, cat) => sum + scores[cat.key] * cat.weight,
      0
    );
    const penalty = redFlags * 1.5; // subtract 1.5 points per red flag
    setFinalScore(Math.max(0, Math.round(total * 10 - penalty)));
  };

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <h1 className="text-3xl font-bold mb-6 text-center">Project Potential Meter (CPM)</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {categories.map(cat => (
          <Card key={cat.key} className="bg-gray-900">
            <CardContent className="p-4">
              <label className="block mb-2">{cat.label}</label>
              <Slider
                defaultValue={[scores[cat.key]]}
                min={0}
                max={10}
                step={1}
                onValueChange={([val]) => handleScoreChange(cat.key, val)}
              />
            </CardContent>
          </Card>
        ))}

        <Card className="bg-gray-900 md:col-span-2">
          <CardContent className="p-4">
            <label className="block mb-2">Red Flags (e.g., undoxxed, no GitHub, pump & dump signs)</label>
            <Slider
              defaultValue={[0]}
              min={0}
              max={10}
              step={1}
              onValueChange={([val]) => setRedFlags(val)}
            />
          </CardContent>
        </Card>
      </div>

      <div className="text-center mt-6">
        <Button onClick={calculateScore} className="bg-green-600 hover:bg-green-700 text-white">Calculate Score</Button>
        {finalScore !== null && (
          <div className="mt-6 text-2xl font-semibold flex items-center justify-center gap-2">
            <Gauge className="w-6 h-6" />
            Score: {finalScore} / 100 â€” {finalScore >= 80 ? "Strong Hold" : finalScore >= 60 ? "Cautious Hold" : finalScore >= 40 ? "Watch Closely" : "Likely Sell"}
          </div>
        )}
      </div>
    </div>
  );
}
